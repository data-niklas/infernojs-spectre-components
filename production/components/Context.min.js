import{Component}from"../inferno.min.js";Component.prototype.subscribe=subscribe,Component.prototype.unsubscribe=unsubscribe,window.contexts||(window.contexts={});var contexts=window.contexts;class Context{constructor(name,defaultValue){this.name=name,this.listeners=[],this.value=defaultValue}attach(item,varname){this.listeners.push({item:item,varname:varname})}deattach(item){for(let index=0;index<this.listeners.length;index++)this.listeners[i]===item&&(this.listeners.splice(index,1),index--)}setState(value){for(var listener of(this.value=value,this.listeners)){var obj={};listener.varname?obj[listener.varname]=value:obj[this.name]=value,listener.item.setState(obj)}}}function subscribe(context,varname){var ctx,ctx;(ctx=contexts[context])?ctx.attach(this,varname):((ctx=new Context(context)).attach(this,varname),contexts[context]=ctx);varname?this.state[varname]=ctx.value:this.state[context]=ctx.value}function unsubscribe(context){contexts[context]&&contexts[context].deattach(this)}function createCtx(name,defaultValue={}){contexts[name]||(contexts[name]=new Context(name,defaultValue))}function setCtx(context,state){contexts[context]&&contexts[context].setState(state)}function getCtx(context){return contexts[context]?contexts[context].value:{}}export default{Context:Context,subscribe:subscribe,unsubscribe:unsubscribe,createCtx:createCtx,setCtx:setCtx,getCtx:getCtx};