import{Component}from"../../inferno.min.js";import{createElement as c}from"../../inferno-create-element.min.js";import{generateClassName,addEvents}from"../Utils.min.js";class Select extends Component{constructor(props){super(props),this.state={selectedIndexes:[this.props.default||0]}}render(){var that=this,props={},className="form-select";props=generateClassName(this.props,className),props=addEvents(this.props,props),!0===this.props.multiple&&(props.multiple=!0),this.props.size&&(props.size=this.props.size);var hasHint=!!this.props.hint,options=this.props.options||[];options=this.generateOptions(options,this,hasHint,c),hasHint&&options.splice(0,0,c("option",{selected:"selected",disabled:!0,hidden:!0},this.props.hint));var listener=props.onchange;return props.onchange=this.getChangeEvent(this,listener),c("select",props,options)}indexSelected(index){return-1!==this.state.selectedIndexes.indexOf(index)}getChangeEvent(that,listener){return oEvent=>{var children=Array.from(oEvent.target.childNodes),indexes=Array.from(oEvent.target.selectedOptions).map(item=>children.indexOf(item));listener&&listener(oEvent,indexes),that.setState({selectedIndexes:indexes})}}generateOptions(options,that,hasHint,c){return options.map((option,index)=>{var key,text;"object"==typeof option?(key=option.key,text=option.text):(key=option,text=option);var optionProps={value:key};return that.indexSelected(index+hasHint?1:0)&&(optionProps.selected="selected"),c("option",optionProps,text)})}}export default Select;